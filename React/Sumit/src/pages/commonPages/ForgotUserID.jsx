import {
  Alert,
  Box,
  Button,
  Card,
  CardContent,
  Snackbar,
  TextField,
  Typography,
} from "@mui/material";
import Grid from "@mui/material/Grid";
import Link from "@mui/material/Link";
import PersonIcon from "@mui/icons-material/Person";
import ShieldIcon from "@mui/icons-material/Shield";
import IosShareIcon from "@mui/icons-material/IosShare";
import RefreshIcon from "@mui/icons-material/Refresh"; // Import RefreshIcon for the Captcha
import { useCallback, useState, useRef, useEffect } from "react"; // Import useEffect for Captcha generation

import Captcha from "../../components/utils/Captcha";

const ForgotUserID = () => {
  // State for mobile number input
  const [mobileNumber, setMobileNumber] = useState("");
  // State for CAPTCHA input by the user
  const [captchaInput, setCaptchaInput] = useState("");
  // State to store the CAPTCHA value generated by the Captcha component
  const [generatedCaptcha, setGeneratedCaptcha] = useState("");
  // State for controlling the visibility of the Snackbar
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  // State for the message displayed in the Snackbar
  const [snackbarMessage, setSnackbarMessage] = useState("");
  // State for the severity (type) of the Snackbar message (e.g., "success", "error", "info")
  const [snackbarSeverity, setSnackbarSeverity] = useState("info");

  // New state to control the visibility of the OTP input section
  const [showOtpFields, setShowOtpFields] = useState(false);
  // State to store the 6 individual digits of the OTP
  const [otp, setOtp] = useState(["", "", "", "", "", ""]);

  // New state to track if CAPTCHA and mobile number are verified
  const [isCaptchaAndMobileVerified, setIsCaptchaAndMobileVerified] =
    useState(false);

  // useRef hook to create an array of refs for each OTP input field,
  // allowing programmatic focus management.
  const otpRefs = useRef([]);

  // Callback function to receive the generated CAPTCHA value from the Captcha component.
  // useCallback is used to memoize this function, preventing unnecessary re-renders of Captcha.
  const handleCaptchaGenerated = useCallback(
    (captchaValue) => {
      setGeneratedCaptcha(captchaValue);
      setCaptchaInput(""); // Clear user's CAPTCHA input field when a new CAPTCHA is generated
      setShowOtpFields(false); // Hide OTP fields if CAPTCHA is regenerated or changed
      setIsCaptchaAndMobileVerified(false); // Reset verification status
    },
    [] // Dependencies are intentionally empty as state setters are stable
  );

  // Handler for the "Verify & Proceed" button click.
  // This function validates the CAPTCHA and, if successful, reveals the OTP fields.
  const handleVerifyAndProceed = () => {
    // Basic validation for mobile number
    if (
      !mobileNumber ||
      mobileNumber.length !== 10 ||
      !/^\d+$/.test(mobileNumber)
    ) {
      setSnackbarMessage("Please enter a valid 10-digit Mobile Number.");
      setSnackbarSeverity("warning");
      setSnackbarOpen(true);
      return;
    }

    // Trim whitespace from user input before comparison
    if (captchaInput.trim().toLowerCase() === generatedCaptcha.toLowerCase()) {
      // Case-insensitive comparison
      setSnackbarMessage(
        "CAPTCHA Verified Successfully! Please enter the OTP sent to your mobile."
      );
      setSnackbarSeverity("success");
      setShowOtpFields(true); // Show OTP fields on successful CAPTCHA verification
      setIsCaptchaAndMobileVerified(true); // Set verification status to true
      // In a real application, you would typically make an API call here
      // to send an OTP to the `mobileNumber`.
      console.log("CAPTCHA Verified. Triggering OTP send to:", mobileNumber);
    } else {
      setSnackbarMessage("Incorrect CAPTCHA. Please try again.");
      setSnackbarSeverity("error");
      setShowOtpFields(false); // Hide OTP fields if CAPTCHA is incorrect
      setIsCaptchaAndMobileVerified(false); // Keep verification status false
    }
    setSnackbarOpen(true); // Open the snackbar to show the message
  };

  // Handler for changes in the individual OTP input fields.
  // Manages the `otp` state and automatically moves focus to the next input.
  const handleOtpChange = (index, value) => {
    // Restrict input to a single digit and numeric characters only
    if (value.length > 1) {
      value = value.charAt(0); // Take only the first character if more than one is pasted/typed
    }
    if (!/^\d*$/.test(value)) {
      return; // If input is not a digit, do nothing
    }

    const newOtp = [...otp]; // Create a mutable copy of the OTP array
    newOtp[index] = value; // Update the specific digit
    setOtp(newOtp); // Update the OTP state

    // Automatically move focus to the next input field if a digit was entered
    if (value && index < otp.length - 1) {
      otpRefs.current[index + 1].focus();
    } else if (value && index === otp.length - 1) {
      // If the last digit is entered, blur the current input
      otpRefs.current[index].blur();
    }
  };

  // Handler for keydown events in OTP input fields, primarily for backspace logic.
  const handleOtpKeyDown = (index, e) => {
    // If backspace is pressed and the current field is empty (or content deleted),
    // and it's not the first field, move focus to the previous field.
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      otpRefs.current[index - 1].focus();
    }
  };

  // Handler for the "Verify OTP" button click.
  // This function would typically send the entered OTP to a backend for verification.
  const handleVerifyOtp = () => {
    const fullOtp = otp.join(""); // Combine all OTP digits into a single string
    if (fullOtp.length === 6) {
      setSnackbarMessage(`Verifying OTP: ${fullOtp}...`);
      setSnackbarSeverity("info");
      // This is where you would integrate your actual API call to verify the OTP.
      // Example of an API call placeholder:
      /*
      verifyOtpApiCall(fullOtp, mobileNumber)
        .then(response => {
          if (response.success) {
            setSnackbarMessage("OTP Verified Successfully! Redirecting...");
            setSnackbarSeverity("success");
            // Navigate to next page or perform login
          } else {
            setSnackbarMessage("Incorrect OTP. Please try again.");
            setSnackbarSeverity("error");
            // Optionally clear OTP fields: setOtp(["", "", "", "", "", ""]);
          }
        })
        .catch(error => {
          setSnackbarMessage("OTP verification failed. Please try again later.");
          setSnackbarSeverity("error");
          console.error("OTP verification error:", error);
        });
      */
    } else {
      setSnackbarMessage("Please enter the complete 6-digit OTP.");
      setSnackbarSeverity("warning");
    }
    setSnackbarOpen(true); // Open the snackbar to show the message
  };

  // Handler to close the Snackbar message.
  const handleCloseSnackbar = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setSnackbarOpen(false);
  };

  return (
    <>
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: "20px", // Add some padding around the card
          minHeight: "80vh", // Ensure it takes full viewport height for centering
          boxSizing: "border-box", // Include padding in element's total width and height
        }}
      >
        <Card
          sx={{
            borderRadius: 2, // Rounded corners for the card
            boxShadow: 3, // Increased shadow for better visual separation
            width: {
              xs: "90%", // Responsive width for smaller screens
              sm: "500px", // Fixed width for larger screens
            },
            padding: "20px", // Added internal padding for content
            maxWidth: "90%", // Ensure it doesn't overflow on very small screens
          }}
        >
          <CardContent>
            <Typography
              variant="h5" // Larger variant for primary title
              component="div"
              gutterBottom
              sx={{
                color: "#000080", // Navy blue color for the title
                fontWeight: 600, // Bold font weight
                textAlign: "center",
                mb: 2, // Margin bottom
              }}
            >
              Forgot User Id
            </Typography>

            <Typography
              variant="body1" // Adjusted variant for descriptive text
              color="text.secondary" // Secondary text color
              sx={{ marginBottom: "1.5rem", textAlign: "center" }}
            >
              Enter your mobile number to retrieve your User ID
            </Typography>

            {/* Mobile Number Input Section */}
            {!isCaptchaAndMobileVerified && ( // Only show if not yet verified
              <Box
                sx={{
                  mb: "1.5rem",
                  width: { xs: "100%", sm: "80%" }, // Responsive width
                  margin: "0 auto 1.5rem auto", // Center the box and add margin
                }}
              >
                <Typography variant="body2" sx={{ fontWeight: "bold", mb: 1 }}>
                  Mobile Number
                </Typography>
                <TextField
                  fullWidth
                  variant="outlined"
                  value={mobileNumber}
                  onChange={(e) => setMobileNumber(e.target.value)}
                  placeholder="Enter your Mobile Number"
                  type="tel" // Set type to tel for mobile number input
                  inputProps={{ maxLength: 10 }} // Restrict to 10 digits
                  InputProps={{
                    startAdornment: (
                      <Box
                        sx={{ mr: 1, display: "flex", alignItems: "center" }}
                      >
                        <PersonIcon sx={{ fontSize: 20, color: "#666" }} />
                      </Box>
                    ),
                    sx: { borderRadius: "8px", height: "45px" }, // Rounded corners and fixed height for input
                  }}
                />
              </Box>
            )}

            {/* Captcha Section - Displayed side by side with input */}
            {!isCaptchaAndMobileVerified && ( // Only show if not yet verified
              <Box
                sx={{
                  width: { xs: "100%", sm: "80%" },
                  margin: "0 auto 1.5rem auto",
                }}
              >
                <Typography variant="body2" sx={{ fontWeight: "bold", mb: 1 }}>
                  Captcha
                </Typography>
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    gap: 2, // Gap between captcha input and display
                    flexDirection: { xs: "column", sm: "row" }, // Stack on small screens, side-by-side on larger
                  }}
                >
                  {/* Captcha Input field */}
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    sx={{ width: { xs: "100%", sm: "auto" } }}
                  >
                    <TextField
                      fullWidth
                      variant="outlined"
                      type="text"
                      value={captchaInput}
                      onChange={(e) => setCaptchaInput(e.target.value)}
                      placeholder="Enter captcha"
                      InputProps={{
                        startAdornment: (
                          <Box
                            sx={{
                              mr: 1,
                              display: "flex",
                              alignItems: "center",
                            }}
                          >
                            <ShieldIcon sx={{ fontSize: 20, color: "#666" }} />
                          </Box>
                        ),
                        sx: { borderRadius: "8px", height: "45px" },
                      }}
                    />
                  </Grid>
                  {/* Captcha Display component */}
                  <Grid
                    item
                    xs={12}
                    sm={6}
                    sx={{ width: { xs: "100%", sm: "auto" } }}
                  >
                    <Captcha onCaptchaGenerated={handleCaptchaGenerated} />
                  </Grid>
                </Box>
              </Box>
            )}

            {/* Verify & Proceed Button for CAPTCHA */}
            {!isCaptchaAndMobileVerified && ( // Only show if not yet verified
              <Box sx={{ display: "flex", mt: 3, justifyContent: "center" }}>
                <Button
                  variant="contained"
                  onClick={handleVerifyAndProceed}
                  startIcon={<IosShareIcon size={20} />}
                  sx={{
                    backgroundColor: "#ff9933", // Orange color for the button
                    "&:hover": {
                      backgroundColor: "#e68a00", // Slightly darker orange on hover
                    },
                    borderRadius: "8px",
                    width: { xs: "100%", sm: "80%" }, // Responsive width for the button
                    padding: "0.75rem 1.5rem",
                    fontWeight: "bold",
                    height: "45px",
                    textTransform: "none", // Prevent uppercase text
                  }}
                >
                  Verify & Proceed
                </Button>
              </Box>
            )}

            {/* --- OTP Section - Conditionally rendered --- */}
            {showOtpFields && (
              <>
                <Box
                  sx={{
                    mt: "2rem", // Margin top to separate from previous section
                    width: { xs: "100%", sm: "80%" },
                    margin: "2rem auto 1.5rem auto", // Center the box
                  }}
                >
                  <Typography
                    variant="body2"
                    sx={{ fontWeight: "bold", mb: 1 }}
                  >
                    Enter OTP
                  </Typography>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      gap: 1, // Gap between OTP input fields
                    }}
                  >
                    {/* Map over the OTP array to create 6 individual input fields */}
                    {otp.map((digit, index) => (
                      <TextField
                        key={index} // Unique key for each mapped component
                        inputRef={(el) => (otpRefs.current[index] = el)} // Assign ref for focus management
                        variant="outlined"
                        value={digit}
                        onChange={(e) => handleOtpChange(index, e.target.value)}
                        onKeyDown={(e) => handleOtpKeyDown(index, e)}
                        inputProps={{
                          maxLength: 1, // Restrict to a single character per input
                          style: { textAlign: "center", padding: "10px 0" }, // Center text in input
                        }}
                        sx={{
                          width: "calc(100% / 6 - 5px)", // Calculate width to fit 6 fields with gap
                          borderRadius: "8px",
                          "& input": {
                            height: "25px", // Adjust height for a square-like appearance
                          },
                        }}
                      />
                    ))}
                  </Box>
                </Box>

                {/* Verify OTP Button */}
                <Box sx={{ display: "flex", mt: 3, justifyContent: "center" }}>
                  <Button
                    variant="contained"
                    onClick={handleVerifyOtp}
                    startIcon={<ShieldIcon size={20} />} // Changed icon for OTP verification
                    sx={{
                      backgroundColor: "#4CAF50", // Green color for OTP button
                      "&:hover": {
                        backgroundColor: "#45a049", // Darker green on hover
                      },
                      borderRadius: "8px",
                      width: { xs: "100%", sm: "80%" }, // Responsive width
                      padding: "0.75rem 1.5rem",
                      fontWeight: "bold",
                      height: "45px",
                      textTransform: "none",
                    }}
                  >
                    Verify OTP
                  </Button>
                </Box>
              </>
            )}
            {/* --- End OTP Section --- */}

            {/* Forgot User ID Link (remains at the bottom) */}
            {/* <Grid
              container
              sx={{
                marginTop: "2%",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
              }}
              direction="row"
            >
              <Grid item xs={12} sx={{ textAlign: "center" }}>
                <Link
                  href="/forgotuserid"
                  variant="body2"
                  sx={{
                    color: "#ff9933",
                    textDecoration: "none",
                    "&:hover": { textDecoration: "underline" },
                  }}
                >
                  Forgot User ID?
                </Link>
              </Grid>
            </Grid> */}
          </CardContent>
        </Card>
      </Box>

      {/* Snackbar for displaying verification messages */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={4000} // Auto-hide after 4 seconds
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "top", horizontal: "right" }} // Position at top-right
        sx={{ zIndex: 9999 }} // Ensure it's above other elements
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity} // Severity (success, error, info, warning)
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </>
  );
};

export default ForgotUserID;
